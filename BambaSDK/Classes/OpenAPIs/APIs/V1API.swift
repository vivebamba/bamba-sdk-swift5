//
// V1API.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

open class V1API {
    /**
     Send messages to the Bamba Advisor
     
     - parameter advisorMessageRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func v1AdvisorMessagePost(advisorMessageRequest: AdvisorMessageRequest? = nil, apiResponseQueue: DispatchQueue = BambaSDKAPI.apiResponseQueue, completion: @escaping ((_ data: InlineResponse2001?, _ error: Error?) -> Void)) {
        v1AdvisorMessagePostWithRequestBuilder(advisorMessageRequest: advisorMessageRequest).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Send messages to the Bamba Advisor
     - POST /v1/advisor/message
     - Send mesages to the Bamba Advisor from new or existing customers
     - API Key:
       - type: apiKey x-api-key 
       - name: ApiKeyAuth
     - parameter advisorMessageRequest: (body)  (optional)
     - returns: RequestBuilder<InlineResponse2001> 
     */
    open class func v1AdvisorMessagePostWithRequestBuilder(advisorMessageRequest: AdvisorMessageRequest? = nil) -> RequestBuilder<InlineResponse2001> {
        let path = "/v1/advisor/message"
        let URLString = BambaSDKAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: advisorMessageRequest)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<InlineResponse2001>.Type = BambaSDKAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Get customer services
     
     - parameter customerId: (path) Bamba customer unique identifier 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func v1CustomerCustomerIdServicesGet(customerId: Int, apiResponseQueue: DispatchQueue = BambaSDKAPI.apiResponseQueue, completion: @escaping ((_ data: Subscription?, _ error: Error?) -> Void)) {
        v1CustomerCustomerIdServicesGetWithRequestBuilder(customerId: customerId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get customer services
     - GET /v1/customer/{customerId}/services
     - Get all customer services
     - API Key:
       - type: apiKey x-api-key 
       - name: ApiKeyAuth
     - parameter customerId: (path) Bamba customer unique identifier 
     - returns: RequestBuilder<Subscription> 
     */
    open class func v1CustomerCustomerIdServicesGetWithRequestBuilder(customerId: Int) -> RequestBuilder<Subscription> {
        var path = "/v1/customer/{customerId}/services"
        let customerIdPreEscape = "\(APIHelper.mapValueToPathItem(customerId))"
        let customerIdPostEscape = customerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{customerId}", with: customerIdPostEscape, options: .literal, range: nil)
        let URLString = BambaSDKAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Subscription>.Type = BambaSDKAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Cancel customer services
     
     - parameter customerId: (path) Bamba customer unique identifier 
     - parameter sku: (path) Service sku 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func v1CustomerCustomerIdServicesSkuCancelPut(customerId: String, sku: String, apiResponseQueue: DispatchQueue = BambaSDKAPI.apiResponseQueue, completion: @escaping ((_ data: Subscription?, _ error: Error?) -> Void)) {
        v1CustomerCustomerIdServicesSkuCancelPutWithRequestBuilder(customerId: customerId, sku: sku).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Cancel customer services
     - PUT /v1/customer/{customerId}/services/{sku}/cancel
     - Cancel customer services
     - API Key:
       - type: apiKey x-api-key 
       - name: ApiKeyAuth
     - parameter customerId: (path) Bamba customer unique identifier 
     - parameter sku: (path) Service sku 
     - returns: RequestBuilder<Subscription> 
     */
    open class func v1CustomerCustomerIdServicesSkuCancelPutWithRequestBuilder(customerId: String, sku: String) -> RequestBuilder<Subscription> {
        var path = "/v1/customer/{customerId}/services/{sku}/cancel"
        let customerIdPreEscape = "\(APIHelper.mapValueToPathItem(customerId))"
        let customerIdPostEscape = customerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{customerId}", with: customerIdPostEscape, options: .literal, range: nil)
        let skuPreEscape = "\(APIHelper.mapValueToPathItem(sku))"
        let skuPostEscape = skuPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sku}", with: skuPostEscape, options: .literal, range: nil)
        let URLString = BambaSDKAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Subscription>.Type = BambaSDKAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Place an order
     
     - parameter order: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func v1StoreOrdersPost(order: Order? = nil, apiResponseQueue: DispatchQueue = BambaSDKAPI.apiResponseQueue, completion: @escaping ((_ data: InlineResponse200?, _ error: Error?) -> Void)) {
        v1StoreOrdersPostWithRequestBuilder(order: order).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Place an order
     - POST /v1/store/orders
     - Place an order
     - API Key:
       - type: apiKey x-api-key 
       - name: ApiKeyAuth
     - parameter order: (body)  (optional)
     - returns: RequestBuilder<InlineResponse200> 
     */
    open class func v1StoreOrdersPostWithRequestBuilder(order: Order? = nil) -> RequestBuilder<InlineResponse200> {
        let path = "/v1/store/orders"
        let URLString = BambaSDKAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: order)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<InlineResponse200>.Type = BambaSDKAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Get products
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func v1StoreProductsGet(apiResponseQueue: DispatchQueue = BambaSDKAPI.apiResponseQueue, completion: @escaping ((_ data: [Product]?, _ error: Error?) -> Void)) {
        v1StoreProductsGetWithRequestBuilder().execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get products
     - GET /v1/store/products
     - Retrieve all products
     - API Key:
       - type: apiKey x-api-key 
       - name: ApiKeyAuth
     - returns: RequestBuilder<[Product]> 
     */
    open class func v1StoreProductsGetWithRequestBuilder() -> RequestBuilder<[Product]> {
        let path = "/v1/store/products"
        let URLString = BambaSDKAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[Product]>.Type = BambaSDKAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

}
