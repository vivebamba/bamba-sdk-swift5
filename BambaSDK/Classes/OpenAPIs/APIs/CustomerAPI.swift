//
// CustomerAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

open class CustomerAPI {
    /**
     Get customer services
     
     - parameter customerId: (path) Bamba customer unique identifier 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func customerCustomerIdServiceGet(customerId: Int, apiResponseQueue: DispatchQueue = BambaSDKAPI.apiResponseQueue, completion: @escaping ((_ data: Service?, _ error: Error?) -> Void)) {
        customerCustomerIdServiceGetWithRequestBuilder(customerId: customerId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get customer services
     - GET /customer/{customerId}/service
     - Get all customer services
     - API Key:
       - type: apiKey x-api-key 
       - name: ApiKeyAuth
     - parameter customerId: (path) Bamba customer unique identifier 
     - returns: RequestBuilder<Service> 
     */
    open class func customerCustomerIdServiceGetWithRequestBuilder(customerId: Int) -> RequestBuilder<Service> {
        var path = "/customer/{customerId}/service"
        let customerIdPreEscape = "\(APIHelper.mapValueToPathItem(customerId))"
        let customerIdPostEscape = customerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{customerId}", with: customerIdPostEscape, options: .literal, range: nil)
        let URLString = BambaSDKAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Service>.Type = BambaSDKAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

}
