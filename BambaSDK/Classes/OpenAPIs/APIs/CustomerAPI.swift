//
// CustomerAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

open class CustomerAPI {
    /**
     Get customer services
     
     - parameter customerId: (path) Bamba customer unique identifier 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func customerCustomerIdServicesGet(customerId: String, apiResponseQueue: DispatchQueue = BambaSDKAPI.apiResponseQueue, completion: @escaping ((_ data: [AnyCodable]?, _ error: Error?) -> Void)) {
        customerCustomerIdServicesGetWithRequestBuilder(customerId: customerId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get customer services
     - GET /customer/{customerId}/services
     - Get all customer services
     - API Key:
       - type: apiKey x-api-key 
       - name: ApiKeyAuth
     - parameter customerId: (path) Bamba customer unique identifier 
     - returns: RequestBuilder<[AnyCodable]> 
     */
    open class func customerCustomerIdServicesGetWithRequestBuilder(customerId: String) -> RequestBuilder<[AnyCodable]> {
        var path = "/customer/{customerId}/services"
        let customerIdPreEscape = "\(APIHelper.mapValueToPathItem(customerId))"
        let customerIdPostEscape = customerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{customerId}", with: customerIdPostEscape, options: .literal, range: nil)
        let URLString = BambaSDKAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[AnyCodable]>.Type = BambaSDKAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Cancel customer services
     
     - parameter customerId: (path) The customer UUID assigned by Bamba 
     - parameter serviceId: (path) The service UUID to cancel assigned by Bamba 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func customerCustomerIdServicesServiceIdCancelPut(customerId: String, serviceId: String, apiResponseQueue: DispatchQueue = BambaSDKAPI.apiResponseQueue, completion: @escaping ((_ data: CancellationResponse?, _ error: Error?) -> Void)) {
        customerCustomerIdServicesServiceIdCancelPutWithRequestBuilder(customerId: customerId, serviceId: serviceId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Cancel customer services
     - PUT /customer/{customerId}/services/{serviceId}/cancel
     - Cancel customer services
     - API Key:
       - type: apiKey x-api-key 
       - name: ApiKeyAuth
     - parameter customerId: (path) The customer UUID assigned by Bamba 
     - parameter serviceId: (path) The service UUID to cancel assigned by Bamba 
     - returns: RequestBuilder<CancellationResponse> 
     */
    open class func customerCustomerIdServicesServiceIdCancelPutWithRequestBuilder(customerId: String, serviceId: String) -> RequestBuilder<CancellationResponse> {
        var path = "/customer/{customerId}/services/{serviceId}/cancel"
        let customerIdPreEscape = "\(APIHelper.mapValueToPathItem(customerId))"
        let customerIdPostEscape = customerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{customerId}", with: customerIdPostEscape, options: .literal, range: nil)
        let serviceIdPreEscape = "\(APIHelper.mapValueToPathItem(serviceId))"
        let serviceIdPostEscape = serviceIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{serviceId}", with: serviceIdPostEscape, options: .literal, range: nil)
        let URLString = BambaSDKAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<CancellationResponse>.Type = BambaSDKAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

}
