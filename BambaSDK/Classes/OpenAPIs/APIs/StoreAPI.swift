//
// StoreAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

open class StoreAPI {
    /**
     Place an order
     
     - parameter order: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func storeOrdersPost(order: Order? = nil, apiResponseQueue: DispatchQueue = BambaSDKAPI.apiResponseQueue, completion: @escaping ((_ data: InlineResponse200?, _ error: Error?) -> Void)) {
        storeOrdersPostWithRequestBuilder(order: order).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Place an order
     - POST /store/orders
     - Place an order
     - API Key:
       - type: apiKey x-api-key 
       - name: ApiKeyAuth
     - parameter order: (body)  (optional)
     - returns: RequestBuilder<InlineResponse200> 
     */
    open class func storeOrdersPostWithRequestBuilder(order: Order? = nil) -> RequestBuilder<InlineResponse200> {
        let path = "/store/orders"
        let URLString = BambaSDKAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: order)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<InlineResponse200>.Type = BambaSDKAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Get products
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func storeProductsGet(apiResponseQueue: DispatchQueue = BambaSDKAPI.apiResponseQueue, completion: @escaping ((_ data: [Product]?, _ error: Error?) -> Void)) {
        storeProductsGetWithRequestBuilder().execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get products
     - GET /store/products
     - Retrieve all products
     - API Key:
       - type: apiKey x-api-key 
       - name: ApiKeyAuth
     - returns: RequestBuilder<[Product]> 
     */
    open class func storeProductsGetWithRequestBuilder() -> RequestBuilder<[Product]> {
        let path = "/store/products"
        let URLString = BambaSDKAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[Product]>.Type = BambaSDKAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

}
