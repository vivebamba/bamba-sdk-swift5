//
// BambaAdvisorAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

open class BambaAdvisorAPI {
    /**
     Send messages to the Bamba Advisor
     
     - parameter advisorMessageRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func advisorMessagePost(advisorMessageRequest: AdvisorMessageRequest? = nil, apiResponseQueue: DispatchQueue = BambaSDKAPI.apiResponseQueue, completion: @escaping ((_ data: InlineResponse2001?, _ error: Error?) -> Void)) {
        advisorMessagePostWithRequestBuilder(advisorMessageRequest: advisorMessageRequest).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Send messages to the Bamba Advisor
     - POST /advisor/message
     - Send mesages to the Bamba Advisor from new or existing customers
     - API Key:
       - type: apiKey x-api-key 
       - name: ApiKeyAuth
     - parameter advisorMessageRequest: (body)  (optional)
     - returns: RequestBuilder<InlineResponse2001> 
     */
    open class func advisorMessagePostWithRequestBuilder(advisorMessageRequest: AdvisorMessageRequest? = nil) -> RequestBuilder<InlineResponse2001> {
        let path = "/advisor/message"
        let URLString = BambaSDKAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: advisorMessageRequest)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<InlineResponse2001>.Type = BambaSDKAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

}
