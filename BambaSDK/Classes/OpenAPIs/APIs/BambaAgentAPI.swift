//
// BambaAgentAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

open class BambaAgentAPI {
    /**
     Bamba agent
     
     - parameter message: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func bambaAgentMessagePost(message: Message? = nil, apiResponseQueue: DispatchQueue = BambaSDKAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        bambaAgentMessagePostWithRequestBuilder(message: message).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Bamba agent
     - POST /bamba-agent/message
     - All related with Bamba Agent
     - API Key:
       - type: apiKey x-api-key 
       - name: ApiKeyAuth
     - parameter message: (body)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func bambaAgentMessagePostWithRequestBuilder(message: Message? = nil) -> RequestBuilder<Void> {
        let path = "/bamba-agent/message"
        let URLString = BambaSDKAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: message)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = BambaSDKAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

}
