//
// Product.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

public struct Product: Codable, Hashable {

    /** A unique identifier for the product variant */
    public var sku: String?
    /** The name of the product */
    public var name: String?
    /** Product slug */
    public var slug: String?
    /** The price of the product */
    public var price: Double?
    /** Image of the product */
    public var image: String?
    /** Plan benefit summary */
    public var brief: String?
    /** Commercial information of the product by sections, the number of elements of each array is dynamic */
    public var description: [ProductDescription]?
    /** Link to terms and conditions detailed by product */
    public var terms: String?

    public init(sku: String? = nil, name: String? = nil, slug: String? = nil, price: Double? = nil, image: String? = nil, brief: String? = nil, description: [ProductDescription]? = nil, terms: String? = nil) {
        self.sku = sku
        self.name = name
        self.slug = slug
        self.price = price
        self.image = image
        self.brief = brief
        self.description = description
        self.terms = terms
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case sku
        case name
        case slug
        case price
        case image
        case brief
        case description
        case terms
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(sku, forKey: .sku)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(slug, forKey: .slug)
        try container.encodeIfPresent(price, forKey: .price)
        try container.encodeIfPresent(image, forKey: .image)
        try container.encodeIfPresent(brief, forKey: .brief)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(terms, forKey: .terms)
    }
}
